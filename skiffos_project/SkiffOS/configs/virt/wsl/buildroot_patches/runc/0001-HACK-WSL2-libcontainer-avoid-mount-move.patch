From 95d5b309830e6f35e7d0b21a7bc2c039b7b41679 Mon Sep 17 00:00:00 2001
From: Christian Stewart <christian@paral.in>
Date: Mon, 25 Jan 2021 04:34:09 -0800
Subject: [PATCH] HACK: WSL2: libcontainer: avoid mount --move

In WSL2, the following command will fail silently:

mount --move /path/to/mountpoint /

It appears to succeed, but the mountpoint is not actually moved.

Signed-off-by: Christian Stewart <christian@paral.in>
---
 libcontainer/rootfs_linux.go        | 48 ++++++++++++++++++++---------
 libcontainer/setns_init_linux.go    | 15 +++++++++
 libcontainer/standard_init_linux.go |  1 +
 libcontainer/wsl.go                 | 15 +++++++++
 4 files changed, 65 insertions(+), 14 deletions(-)
 create mode 100644 libcontainer/wsl.go

diff --git a/libcontainer/rootfs_linux.go b/libcontainer/rootfs_linux.go
index 411496ab..7605cc7a 100644
--- a/libcontainer/rootfs_linux.go
+++ b/libcontainer/rootfs_linux.go
@@ -44,6 +44,9 @@ func needsSetupDev(config *configs.Config) bool {
 // finalizeRootfs after this function to finish setting up the rootfs.
 func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
 	config := iConfig.Config
+
+	// WSL2: NOTE: currently we are in /, and not the chroot.
+
 	if err := prepareRoot(config); err != nil {
 		return newSystemErrorWithCause(err, "preparing rootfs")
 	}
@@ -107,13 +110,21 @@ func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
 		return err
 	}
 
-	if config.NoPivotRoot {
-		err = msMoveRoot(config.Rootfs)
-	} else if config.Namespaces.Contains(configs.NEWNS) {
-		err = pivotRoot(config.Rootfs)
-	} else {
-		err = chroot()
-	}
+	// WSL2 Errata: mount --move /path / fails silently.
+	// This breaks pivotRoot and msMoveRoot.
+	// Instead, just use chroot directly.
+	err = chroot()
+
+	/*
+		if config.NoPivotRoot {
+			err = msMoveRoot(config.Rootfs)
+		} else if config.Namespaces.Contains(configs.NEWNS) {
+			err = pivotRoot(config.Rootfs)
+		} else {
+			err = chroot()
+		}
+	*/
+
 	if err != nil {
 		return newSystemErrorWithCause(err, "jailing process inside rootfs")
 	}
@@ -151,11 +162,14 @@ func finalizeRootfs(config *configs.Config) (err error) {
 	}
 
 	// set rootfs ( / ) as readonly
-	if config.Readonlyfs {
-		if err := setReadonly(); err != nil {
-			return newSystemErrorWithCause(err, "setting rootfs as readonly")
+	// WSL2: disable as this does not work properly.
+	/*
+		if config.Readonlyfs {
+			if err := setReadonly(); err != nil {
+				return newSystemErrorWithCause(err, "setting rootfs as readonly")
+			}
 		}
-	}
+	*/
 
 	if config.Umask != nil {
 		unix.Umask(int(*config.Umask))
@@ -735,6 +749,7 @@ func prepareRoot(config *configs.Config) error {
 	if config.RootPropagation != 0 {
 		flag = config.RootPropagation
 	}
+
 	if err := unix.Mount("", "/", "", uintptr(flag), ""); err != nil {
 		return err
 	}
@@ -892,9 +907,14 @@ func msMoveRoot(rootfs string) error {
 	}
 
 	// Move the rootfs on top of "/" in our mount namespace.
-	if err := unix.Mount(rootfs, "/", "", unix.MS_MOVE, ""); err != nil {
-		return err
-	}
+	// WSL2: mount --move {path} / fails silently.
+	// The chroot() still works (changes dir to ., which is rootfs).
+	// Therefore the container still starts, but "exec" will be in the wrong place.
+	/*
+		if err := unix.Mount(rootfs, "/", "", unix.MS_MOVE, ""); err != nil {
+			return err
+		}
+	*/
 	return chroot()
 }
 
diff --git a/libcontainer/setns_init_linux.go b/libcontainer/setns_init_linux.go
index 6b1e9a6e..fa601a9d 100644
--- a/libcontainer/setns_init_linux.go
+++ b/libcontainer/setns_init_linux.go
@@ -31,6 +31,21 @@ func (l *linuxSetnsInit) Init() error {
 	runtime.LockOSThread()
 	defer runtime.UnlockOSThread()
 
+	// HACK: WSL2: awkward chroot, cannot override root /.
+	if err := wslChroot(); err != nil {
+		return err
+	}
+
+	// HACK: WSL2: second chroot to enter rootfs path.
+	if l.config.Config != nil && l.config.Config.Rootfs != "" {
+		if err := unix.Chroot(l.config.Config.Rootfs); err != nil {
+			return errors.Wrap(err, "wsl2: join container rootfs")
+		}
+	}
+	if err := unix.Chdir("/"); err != nil {
+		return err
+	}
+
 	if !l.config.Config.NoNewKeyring {
 		if err := selinux.SetKeyLabel(l.config.ProcessLabel); err != nil {
 			return err
diff --git a/libcontainer/standard_init_linux.go b/libcontainer/standard_init_linux.go
index 7ec506c4..bfaba5ee 100644
--- a/libcontainer/standard_init_linux.go
+++ b/libcontainer/standard_init_linux.go
@@ -46,6 +46,7 @@ func (l *linuxStandardInit) getSessionRingParams() (string, uint32, uint32) {
 func (l *linuxStandardInit) Init() error {
 	runtime.LockOSThread()
 	defer runtime.UnlockOSThread()
+
 	if !l.config.Config.NoNewKeyring {
 		if err := selinux.SetKeyLabel(l.config.ProcessLabel); err != nil {
 			return err
diff --git a/libcontainer/wsl.go b/libcontainer/wsl.go
new file mode 100644
index 00000000..ede2bc5e
--- /dev/null
+++ b/libcontainer/wsl.go
@@ -0,0 +1,15 @@
+// +build linux
+
+package libcontainer
+
+import "golang.org/x/sys/unix"
+
+// HACK: Skiff: we currently hard-code the WSL chroot.
+const wslRoot = "/skiff-overlays/system"
+
+func wslChroot() error {
+	if err := unix.Chroot(wslRoot); err != nil {
+		return err
+	}
+	return unix.Chdir("/")
+}
-- 
2.30.1

